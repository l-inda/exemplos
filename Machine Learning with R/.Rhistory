setwd("~/Library/Mobile Documents/com~apple~CloudDocs/GitHub/exemplos/Machine Learning with R")
# create vectors of data for three medical patients
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
# access the second element in body temperature vector
temperature[2]
## examples of accessing items in vector
# include items in the range 2 to 3
temperature[2:3]
# exclude item 2 using the minus sign
temperature[-2]
# use a vector to indicate whether to include item
temperature[c(TRUE, TRUE, FALSE)]
# add gender factor
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
# add blood type factor
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
# add ordered factor
symptoms <- factor(c("SEVERE", "MILD", "MODERATE"),
levels = c("MILD", "MODERATE", "SEVERE"),
ordered = TRUE)
symptoms
# check for symptoms greater than moderate
symptoms > "MODERATE"
# display information for a patient
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]
# create list for a patient
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
# display the patient
subject1
# get a single list value by position (returns a sub-list)
subject1[2]
# get a single list value by position (returns a numeric vector)
subject1[[2]]
# get a single list value by name
subject1$temperature
# get several list items by specifying a vector of names
subject1[c("temperature", "flu_status")]
## access a list like a vector
# get values 2 and 3
subject1[2:3]
pt_data <- data.frame(subject_name, temperature, flu_status, gender,
blood, symptoms, stringsAsFactors = FALSE)
# display the data frame
pt_data
# get a single column
pt_data$subject_name
# get several columns by specifying a vector of names
pt_data[c("temperature", "flu_status")]
# this is the same as above, extracting temperature and flu_status
pt_data[2:3]
# accessing by row and column
pt_data[1, 2]
# accessing several rows and several columns using vectors
pt_data[c(1, 3), c(2, 4)]
# column 1, all rows
pt_data[, 1]
# row 1, all columns
pt_data[1, ]
# all rows and all columns
pt_data[ , ]
# the following are equivalent
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
# create a 2x2 matrix
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m
# equivalent to the above
m <- matrix(c(1, 2, 3, 4), ncol = 2)
m
# create a 2x3 matrix
m <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
m
# create a 3x2 matrix
m <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
m
# extract values from matrixes
m[1, 1]
m[3, 2]
# extract rows
m[1, ]
# extract columns
m[, 1]
# show all data structures in memory
ls()
# remove the m and subject1 objects
rm(m, subject1)
ls()
rm(list=ls())
## data exploration example using used car data
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
getwd()
## data exploration example using used car data
usedcars <- read.csv(paste0(getwd(),"/data/usedcars.csv"), stringsAsFactors = FALSE)
# get structure of used car data
str(usedcars)
# summarize numeric variables
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
# calculate the mean income
(36000 + 44000 + 56000) / 3
mean(c(36000, 44000, 56000))
# the median income
median(c(36000, 44000, 56000))
# the min/max of used car prices
range(usedcars$price)
# the difference of the range
diff(range(usedcars$price))
# IQR for used car prices
IQR(usedcars$price)
# use quantile to calculate five-number summary
quantile(usedcars$price)
# the 99th percentile
quantile(usedcars$price, probs = c(0.01, 0.99))
# quintiles
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
# boxplot of used car prices and mileage
boxplot(usedcars$price, main="Boxplot of Used Car Prices",
ylab="Price ($)")
boxplot(usedcars$mileage, main="Boxplot of Used Car Mileage",
ylab="Odometer (mi.)")
# histograms of used car prices and mileage
hist(usedcars$price, main = "Histogram of Used Car Prices",
xlab = "Price ($)")
hist(usedcars$mileage, main = "Histogram of Used Car Mileage",
xlab = "Odometer (mi.)")
# variance and standard deviation of the used car data
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
# one-way tables for the used car data
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
# compute table proportions
model_table <- table(usedcars$model)
prop.table(model_table)
# round the data
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
# scatterplot of price vs. mileage
plot(x = usedcars$mileage, y = usedcars$price,
main = "Scatterplot of Price vs. Mileage",
xlab = "Used Car Odometer (mi.)",
ylab = "Used Car Price ($)")
# new variable indicating conservative colors
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
# checking our variable
table(usedcars$conservative)
# Crosstab of conservative by model
library(gmodels)
CrossTable(x = usedcars$model, y = usedcars$conservative)
# criar vetores de dados para três pacientes médicos
subject_name <- c("Desconhecido", "Desconhecida", "José da Silva")
# criar vetores de dados para três pacientes médicos
subject_name <- c("Desconhecido", "Desconhecida", "José da Silva")
temperature <- c(36.7, 37, 38,6)
flu_status <- c(FALSE, FALSE, TRUE)
# access the second element in body temperature vector
temperature[2]
## examples of accessing items in vector
# include items in the range 2 to 3
temperature[2:3]
# exclude item 2 using the minus sign
temperature[-2]
temperature <- c(36.7, 37, 38.6)
flu_status <- c(FALSE, FALSE, TRUE)
# access the second element in body temperature vector
temperature[2]
## examples of accessing items in vector
# include items in the range 2 to 3
temperature[2:3]
# exclude item 2 using the minus sign
temperature[-2]
# use a vector to indicate whether to include item
temperature[c(TRUE, TRUE, FALSE)]
# add gender factor
gender <- factor(c("MALE", "FEMALE", "MALE"))
# add gender factor
gender <- factor(c("MASCULINO", "FEMININO", "MASCULINO"))
gender
# use um vetor para indicar se deseja incluir item
temperature[c(TRUE, TRUE, FALSE)]
# adicionar fator sexo
gender <- factor(c("MASCULINO", "FEMININO", "MASCULINO"))
gender
# adicionar fator de tipo sanguíneo
blood <- factor(c("O", "AB", "A"),
levels = c("A", "B", "AB", "O"))
blood
# adicionar fator ordenado
symptoms <- factor(c("SEVERA", "AMENA", "MODERADA"),
levels = c("AMENA", "MODERADA", "SEVERA"),
ordered = TRUE)
symptoms
# verificar por sintomas maiores que moderados
symptoms > "MODERADA"
# exibir informações para um paciente
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]
# adicionar fator ordenado
symptoms <- factor(c("SEVERA", "AMENA", "MODERADA"),
levels = c("AMENA", "MODERADA", "SEVERA"),
ordered = TRUE)
symptoms
# verificar por sintomas maiores que moderados
symptoms > "MODERADA"
# exibir informações para um paciente
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]
# create list for a patient
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
# display the patient
subject1
blood
# adicionar fator ordenado
symptoms <- factor(c("AMENA","MODERADA","SEVERA"),
levels = c("AMENA", "MODERADA", "SEVERA"),
ordered = TRUE)
symptoms
# verificar por sintomas maiores que moderados
symptoms > "MODERADA"
# exibir informações para um paciente
subject_name[1]
temperature[1]
flu_status[1]
gender[1]
blood[1]
symptoms[1]
# create list for a patient
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
# display the patient
subject1
# criar lista para um paciente
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
# exibir o paciente
subject1
# obter somente um valor da lista por posição (retorna uma sub-lista)
subject1[2]
# acessar o segundo elemento no vetor de temperatura corporal
temperature[2]
# obter um único valor da lista por posição (retorna um vetor numérico)
subject1[[2]]
# obter um único valor de lista pelo nome
subject1$temperature
# obter vários itens da lista especificando um vetor de nomes
subject1[c("temperature", "flu_status")]
## acessar uma lista como um vetor
# obter valores 2 e 3
subject1[2:3]
pt_data <- data.frame(subject_name, temperature, flu_status, gender,
blood, symptoms, stringsAsFactors = FALSE)
# exibir o data frame
pt_data
# obter uma única coluna
pt_data$subject_name
# obter várias colunas especificando um vetor de nomes
pt_data[c("temperature", "flu_status")]
# este é igual ao anterior, extraindo a temperatura (temperature) e o índice de febre (flu_status)
pt_data[2:3]
# acessando por linha e coluna
pt_data[1, 2]
# acessando várias linhas e várias colunas usando vetores
pt_data[c(1, 3), c(2, 4)]
# coluna 1, todas as linhas
pt_data[, 1]
# coluna 1, todas as colunas
pt_data[1, ]
# todas as linhas e todas as colunas
pt_data[ , ]
# o código seguinte é equivalente ao anterior
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
# os código seguintes são equivalentes
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
# crie uma matriz 2x2
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m
# equivalente ao comando anterior
m <- matrix(c(1, 2, 3, 4), ncol = 2)
m
# criar uma matriz 2x3
m <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
m
# criar uma matriz 3x2
m <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
m
# extrair valores de matrizes
m[1, 1]
m[3, 2]
# extrair linhas
m[1, ]
# extrir colunas
m[, 1]
# mostra todas as estruturas de dados na memória
ls()
# remove os objetos m e subject1
rm(m, subject1)
ls()
rm(list=ls())
## exemplo de exploração de dados usando os dados de carros usados
usedcars <- read.csv(paste0(getwd(),"/data/usedcars.csv"), stringsAsFactors = FALSE)
# obter a estrutura de dados de carros usados
str(usedcars)
# sumariza as variáveis numéricas
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
# calcular a renda média
(36000 + 44000 + 56000) / 3
mean(c(36000, 44000, 56000))
# a renda mediana
median(c(36000, 44000, 56000))
# valores mínimo / máximo dos preços de carros usados
range(usedcars$price)
# a diferença do intervalo
diff(range(usedcars$price))
# IQR para preços de carros usados
IQR(usedcars$price)
# use quantil para calcular o resumo dos cinco números
quantile(usedcars$price)
# o percentil 99
quantile(usedcars$price, probs = c(0.01, 0.99))
# quintis
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"), bg = "transparent")
boxplot(usedcars$price, main="Boxplot de Preços de Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"), bg = "transparent")
boxplot(usedcars$mileage, main="Boxplot de quilometragem de carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot de Preços de Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot de quilometragem de carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da quilometragem dos carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odometer (mi.)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-pecos--carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Price ($)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos--carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Price ($)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odômetro (mi.)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos-carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/hist-quilom-carros-usados.png"))
hist(usedcars$mileage, main = "Histograma da Quilometragem dos Carros Usados",
xlab = "Odômetro (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odômetro (milhas)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos-carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/hist-quilom-carros-usados.png"))
hist(usedcars$mileage, main = "Histograma da Quilometragem dos Carros Usados",
xlab = "Odômetro (milhas)")
dev.off()
# variância e desvio padrão dos dados de carros usados
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
# tabelas unidirecionais para os dados de carros usados
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
# calcular proporções da tabela
model_table <- table(usedcars$model)
prop.table(model_table)
# arredondando os dados
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
# gráfico de dispersão de preço versus milhagem
png(file = paste0(getwd(),"/data/figures/disp-preco-milhagem-carros-usados.png"))
plot(x = usedcars$mileage, y = usedcars$price,
main = "Gráfico de Dispersão de Preço vs. Milhagem",
xlab = "Odômetro do Carro Usado (mi.)",
ylab = "Preço do carro usado ($)")
dev.off()
# nova variável que indica cores conservadoras
usedcars$conservative <-
usedcars$color %in% c("Preto", "Cinza", "Prata", "Branco")
# checking our variable
table(usedcars$conservative)
usedcars
# nova variável que indica cores conservadoras
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
# verificando nossa variável
table(usedcars$conservative)
# Tabela de referência cruzada de cor conservadora por modelo
library(gmodels)
CrossTable(x = usedcars$model, y = usedcars$conservative)

# criar lista para um paciente
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
blood = blood[1],
symptoms = symptoms[1])
# exibir o paciente
subject1
# obter somente um valor da lista por posição (retorna uma sub-lista)
subject1[2]
# acessar o segundo elemento no vetor de temperatura corporal
temperature[2]
# obter um único valor da lista por posição (retorna um vetor numérico)
subject1[[2]]
# obter um único valor de lista pelo nome
subject1$temperature
# obter vários itens da lista especificando um vetor de nomes
subject1[c("temperature", "flu_status")]
## acessar uma lista como um vetor
# obter valores 2 e 3
subject1[2:3]
pt_data <- data.frame(subject_name, temperature, flu_status, gender,
blood, symptoms, stringsAsFactors = FALSE)
# exibir o data frame
pt_data
# obter uma única coluna
pt_data$subject_name
# obter várias colunas especificando um vetor de nomes
pt_data[c("temperature", "flu_status")]
# este é igual ao anterior, extraindo a temperatura (temperature) e o índice de febre (flu_status)
pt_data[2:3]
# acessando por linha e coluna
pt_data[1, 2]
# acessando várias linhas e várias colunas usando vetores
pt_data[c(1, 3), c(2, 4)]
# coluna 1, todas as linhas
pt_data[, 1]
# coluna 1, todas as colunas
pt_data[1, ]
# todas as linhas e todas as colunas
pt_data[ , ]
# o código seguinte é equivalente ao anterior
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
# os código seguintes são equivalentes
pt_data[c(1, 3), c("temperature", "gender")]
pt_data[-2, c(-1, -3, -5, -6)]
# crie uma matriz 2x2
m <- matrix(c(1, 2, 3, 4), nrow = 2)
m
# equivalente ao comando anterior
m <- matrix(c(1, 2, 3, 4), ncol = 2)
m
# criar uma matriz 2x3
m <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
m
# criar uma matriz 3x2
m <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 2)
m
# extrair valores de matrizes
m[1, 1]
m[3, 2]
# extrair linhas
m[1, ]
# extrir colunas
m[, 1]
# mostra todas as estruturas de dados na memória
ls()
# remove os objetos m e subject1
rm(m, subject1)
ls()
rm(list=ls())
## exemplo de exploração de dados usando os dados de carros usados
usedcars <- read.csv(paste0(getwd(),"/data/usedcars.csv"), stringsAsFactors = FALSE)
# obter a estrutura de dados de carros usados
str(usedcars)
# sumariza as variáveis numéricas
summary(usedcars$year)
summary(usedcars[c("price", "mileage")])
# calcular a renda média
(36000 + 44000 + 56000) / 3
mean(c(36000, 44000, 56000))
# a renda mediana
median(c(36000, 44000, 56000))
# valores mínimo / máximo dos preços de carros usados
range(usedcars$price)
# a diferença do intervalo
diff(range(usedcars$price))
# IQR para preços de carros usados
IQR(usedcars$price)
# use quantil para calcular o resumo dos cinco números
quantile(usedcars$price)
# o percentil 99
quantile(usedcars$price, probs = c(0.01, 0.99))
# quintis
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"), bg = "transparent")
boxplot(usedcars$price, main="Boxplot de Preços de Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"), bg = "transparent")
boxplot(usedcars$mileage, main="Boxplot de quilometragem de carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot de Preços de Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot de quilometragem de carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da quilometragem dos carros usados",
ylab="Odometer (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Price ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odometer (mi.)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-pecos--carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Price ($)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos--carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Price ($)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odômetro (mi.)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos-carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/hist-quilom-carros-usados.png"))
hist(usedcars$mileage, main = "Histograma da Quilometragem dos Carros Usados",
xlab = "Odômetro (mi.)")
dev.off()
# boxplot de preços de carros usados e suas quilometragens
# nessa versão, gerando um arquivo .png
png(file = paste0(getwd(),"/data/figures/preco-carros-usados.png"))
boxplot(usedcars$price, main="Boxplot dos Preços dos Carros Usados",
ylab="Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/quilometragem-carros-usados.png"))
boxplot(usedcars$mileage, main="Boxplot da Quilometragem dos Carros Usados",
ylab="Odômetro (milhas)")
dev.off()
# histogramas dos preços e da quilometragem dos carros usados
png(file = paste0(getwd(),"/data/figures/hist-precos-carros-usados.png"))
hist(usedcars$price, main = "Histograma dos Preços dos Carros Usados",
xlab = "Preço ($)")
dev.off()
png(file = paste0(getwd(),"/data/figures/hist-quilom-carros-usados.png"))
hist(usedcars$mileage, main = "Histograma da Quilometragem dos Carros Usados",
xlab = "Odômetro (milhas)")
dev.off()
# variância e desvio padrão dos dados de carros usados
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
# tabelas unidirecionais para os dados de carros usados
table(usedcars$year)
table(usedcars$model)
table(usedcars$color)
# calcular proporções da tabela
model_table <- table(usedcars$model)
prop.table(model_table)
# arredondando os dados
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
# gráfico de dispersão de preço versus milhagem
png(file = paste0(getwd(),"/data/figures/disp-preco-milhagem-carros-usados.png"))
plot(x = usedcars$mileage, y = usedcars$price,
main = "Gráfico de Dispersão de Preço vs. Milhagem",
xlab = "Odômetro do Carro Usado (mi.)",
ylab = "Preço do carro usado ($)")
dev.off()
# nova variável que indica cores conservadoras
usedcars$conservative <-
usedcars$color %in% c("Preto", "Cinza", "Prata", "Branco")
# checking our variable
table(usedcars$conservative)
usedcars
# nova variável que indica cores conservadoras
usedcars$conservative <-
usedcars$color %in% c("Black", "Gray", "Silver", "White")
# verificando nossa variável
table(usedcars$conservative)
# Tabela de referência cruzada de cor conservadora por modelo
library(gmodels)
CrossTable(x = usedcars$model, y = usedcars$conservative)
# import the CSV file
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
getwd()
# import the CSV file
wbcd <- read.csv(paste0(getwd(),"/data/wisc_bc_data.csv"), stringsAsFactors = FALSE)
# examine the structure of the wbcd data frame
str(wbcd)
# drop the id feature
wbcd <- wbcd[-1]
# table of diagnosis
table(wbcd$diagnosis)
# recode diagnosis as a factor
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
# table or proportions with more informative labels
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# summarize three numeric features
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the wbcd data
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirm that normalization worked
summary(wbcd_n$area_mean)
# create training and test data
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
# load the "class" library
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# load the "gmodels" library
library(gmodels)
# Create the cross tabulation of predicted vs. actual
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# use the scale() function to z-score standardize a data frame
wbcd_z <- as.data.frame(scale(wbcd[-1]))
# confirm that the transformation was applied correctly
summary(wbcd_z$area_mean)
# create training and test datasets
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
# re-classify test cases
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# Create the cross tabulation of predicted vs. actual
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# try several different values of k
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=1)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=5)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=11)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=15)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=27)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
# importar o arquivo CSV
wbcd <- read.csv(paste0(getwd(),"/data/wisc_bc_data.csv"), stringsAsFactors = FALSE)
# importar o arquivo CSV
wbcd <- read.csv(paste0(getwd(),"/data/wisc_bc_data.csv"), stringsAsFactors = FALSE)
# examinar a estrutura do data frame 'wbcd'
str(wbcd)
# tabela de diagnóstico
table(wbcd$diagnosis)
# recodificar o diagnóstico como 'fator'
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benigno", "Maligno"))
# tabela ou proporções com os rótulos mais informativos
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# sumarizar três campos numéricos
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# criar função de normalização
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
normalize2 <- function(x) {
return ((x - mean(x) / sd(x)))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize2(c(1, 2, 3, 4, 5))
normalize2 <- function(x) {
return ((x - mean(x)) / sd(x))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize2(c(1, 2, 3, 4, 5))
mean(c(1, 2, 3, 4, 5))
sd(c(1, 2, 3, 4, 5))
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# retirar o campo id (é o primeiro campo do data frame)
wbcd <- wbcd[-1]
# tabela de diagnóstico
table(wbcd$diagnosis)
# recodificar o diagnóstico como 'fator'
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benigno", "Maligno"))
# tabela ou proporções com os rótulos mais informativos
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# sumarizar três campos numéricos
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# criar função de normalização
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
View(wbcd)
# normalizar os dados no data frame wbcd
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirmar se a normalização funcionou!
summary(wbcd_n$area_mean)
# criar dados de treinamento de teste
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
# carrega a biblioteca "class"
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
##### Capítulo 3: Classificação usando vizinhos mais próximos --------------------
## Exemplo: Classificação de amostras de câncer ----
## Etapa 2: Explorando e preparando os dados ----
# importar o arquivo CSV
wbcd <- read.csv(paste0(getwd(),"/data/wisc_bc_data.csv"), stringsAsFactors = FALSE)
# examinar a estrutura do data frame 'wbcd'
str(wbcd)
#'data.frame':	569 obs. of  32 variables:
#  $ id     : int  87139402 8910251 905520 868871 9012568 906539 925291 87880 862989 89827 ...
#$ diagnosis: chr  "B" "B" "B" "B" ...
# retirar o campo id (é o primeiro campo do data frame)
wbcd <- wbcd[-1]
# tabela de diagnóstico
table(wbcd$diagnosis)
# recodificar o diagnóstico como 'fator'
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benigno", "Maligno"))
# tabela ou proporções com os rótulos mais informativos
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# sumarizar três campos numéricos
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# criar função de normalização
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalizar os dados no data frame wbcd
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirmar se a normalização funcionou!
summary(wbcd_n$area_mean)
# criar dados de treinamento de teste
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
# criar rótulos para os dados de treinamento e de testes
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
## Etapa 3: Treinando um modelo sobre os dados ----
# carrega a biblioteca "class"
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# carrega a biblioteca "gmodels"
library(gmodels)
# Criar a tabulação cruzada do previsto x realizado
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# use a função scale () para padronizar o z-score do data frame
wbcd_z <- as.data.frame(scale(wbcd[-1]))
# confirmar se a transformação foi aplicada corretamente
summary(wbcd_z$area_mean)
# criar dados de treinamentos e de teste
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
# reclassificar os casos de teste
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# Criar a tabulação cruzada do previsto x realizado
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# experimentar valores diferentes de k
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=1)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=5)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=11)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=15)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=27)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
library(RWeka)
install.packages("RWeka")
library(RWeka)
# importar o arquivo CSV
wbcd <- read.csv(paste0(getwd(),"/data/wisc_bc_data.csv"), stringsAsFactors = FALSE)
# examinar a estrutura do data frame 'wbcd'
str(wbcd)
# retirar o campo id (é o primeiro campo do data frame)
wbcd <- wbcd[-1]
# tabela de diagnóstico
table(wbcd$diagnosis)
# recodificar o diagnóstico como 'fator'
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benigno", "Maligno"))
# tabela ou proporções com os rótulos mais informativos
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
# sumarizar três campos numéricos
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
# criar função de normalização
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# teste da função de normalização - o resultado deve ser idêntico
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalizar os dados no data frame wbcd
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
# confirmar se a normalização funcionou!
summary(wbcd_n$area_mean)
# criar dados de treinamento de teste
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
# carrega a biblioteca "class"
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# carrega a biblioteca "gmodels"
library(gmodels)
# Criar a tabulação cruzada do previsto x realizado
##A tabulação cruzada é uma ferramenta que permite comparar a relação entre duas variáveis
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# use a função scale () para padronizar o z-score do data frame
wbcd_z <- as.data.frame(scale(wbcd[-1]))
# confirmar se a transformação foi aplicada corretamente
summary(wbcd_z$area_mean)
# criar dados de treinamentos e de teste
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
# reclassificar os casos de teste
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
cl = wbcd_train_labels, k = 21)
# Criar a tabulação cruzada do previsto x realizado
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,
prop.chisq = FALSE)
# experimentar valores diferentes de k
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=1)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=5)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=11)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=15)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=27)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
